"""
ML Forecast API - Returns 24-hour CMG predictions from trained models
Serves predictions generated by scripts/ml_hourly_forecast.py
"""

from http.server import BaseHTTPRequestHandler
import json
import sys
from pathlib import Path
from datetime import datetime, timedelta

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """Return latest ML predictions"""

        # CORS headers
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Cache-Control', 'max-age=300')  # Cache for 5 minutes
        self.end_headers()

        try:
            # Path to latest predictions
            predictions_file = Path(__file__).parent.parent / 'data' / 'ml_predictions' / 'latest.json'

            if not predictions_file.exists():
                raise FileNotFoundError("ML predictions not yet generated")

            # Load predictions
            with open(predictions_file, 'r') as f:
                ml_data = json.load(f)

            # Transform to chart-friendly format
            chart_data = []
            base_dt = datetime.fromisoformat(ml_data['base_datetime'])

            for forecast in ml_data['forecasts']:
                target_dt = datetime.fromisoformat(forecast['target_datetime'])

                chart_data.append({
                    'datetime': forecast['target_datetime'],
                    'hour': target_dt.hour,
                    'horizon': forecast['horizon'],
                    'cmg_predicted': forecast['predicted_cmg'],
                    'zero_probability': forecast['zero_probability'],
                    'decision_threshold': forecast['decision_threshold'],
                    'value_prediction': forecast['value_prediction'],
                    'confidence_lower': forecast['confidence_interval']['lower_10th'],
                    'confidence_median': forecast['confidence_interval']['median'],
                    'confidence_upper': forecast['confidence_interval']['upper_90th'],
                    'is_ml_prediction': True
                })

            # Response
            response = {
                'success': True,
                'model_version': ml_data['model_version'],
                'generated_at': ml_data['generated_at'],
                'base_datetime': ml_data['base_datetime'],
                'model_performance': ml_data['model_performance'],
                'predictions_count': len(chart_data),
                'predictions': chart_data,
                'status': {
                    'available': True,
                    'last_update': ml_data['generated_at'],
                    'horizons': len(chart_data)
                }
            }

            self.wfile.write(json.dumps(response, default=str).encode())

        except FileNotFoundError:
            # Predictions not available yet
            error_response = {
                'success': False,
                'error': 'ML predictions not yet generated',
                'message': 'Predictions are generated hourly. Please check back shortly.',
                'predictions': [],
                'status': {
                    'available': False,
                    'last_update': None
                }
            }
            self.wfile.write(json.dumps(error_response).encode())

        except Exception as e:
            # Other errors
            error_response = {
                'success': False,
                'error': str(e),
                'message': 'Failed to load ML predictions',
                'predictions': [],
                'status': {
                    'available': False,
                    'last_update': None
                }
            }
            self.wfile.write(json.dumps(error_response).encode())

    def do_OPTIONS(self):
        """Handle CORS preflight"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
